// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudinit;

import com.pulumi.cloudinit.Utilities;
import com.pulumi.cloudinit.inputs.GetConfigArgs;
import com.pulumi.cloudinit.inputs.GetConfigPlainArgs;
import com.pulumi.cloudinit.outputs.GetConfigResult;
import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import java.util.concurrent.CompletableFuture;

public final class CloudinitFunctions {
    /**
     * Renders a [multipart MIME configuration](https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive)
     * for use with [cloud-init](https://cloudinit.readthedocs.io/).
     * 
     * Cloud-init is a commonly-used startup configuration utility for cloud compute
     * instances. It accepts configuration via provider-specific user data mechanisms,
     * such as `user_data` for Amazon EC2 instances. Multipart MIME is one of the
     * data formats it accepts. For more information, see
     * [User-Data Formats](https://cloudinit.readthedocs.io/en/latest/topics/format.html)
     * in the cloud-init manual.
     * 
     * This is not a generalized utility for producing multipart MIME messages. Its
     * featureset is specialized for the features of cloud-init.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.cloudinit.CloudinitFunctions;
     * import com.pulumi.cloudinit.inputs.GetConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = CloudinitFunctions.getConfig(GetConfigArgs.builder()
     *             .base64Encode(false)
     *             .gzip(false)
     *             .parts(GetConfigPartArgs.builder()
     *                 .content(&#34;baz&#34;)
     *                 .contentType(&#34;text/x-shellscript&#34;)
     *                 .filename(&#34;foobar.sh&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetConfigResult> getConfig(GetConfigArgs args) {
        return getConfig(args, InvokeOptions.Empty);
    }
    /**
     * Renders a [multipart MIME configuration](https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive)
     * for use with [cloud-init](https://cloudinit.readthedocs.io/).
     * 
     * Cloud-init is a commonly-used startup configuration utility for cloud compute
     * instances. It accepts configuration via provider-specific user data mechanisms,
     * such as `user_data` for Amazon EC2 instances. Multipart MIME is one of the
     * data formats it accepts. For more information, see
     * [User-Data Formats](https://cloudinit.readthedocs.io/en/latest/topics/format.html)
     * in the cloud-init manual.
     * 
     * This is not a generalized utility for producing multipart MIME messages. Its
     * featureset is specialized for the features of cloud-init.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.cloudinit.CloudinitFunctions;
     * import com.pulumi.cloudinit.inputs.GetConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = CloudinitFunctions.getConfig(GetConfigArgs.builder()
     *             .base64Encode(false)
     *             .gzip(false)
     *             .parts(GetConfigPartArgs.builder()
     *                 .content(&#34;baz&#34;)
     *                 .contentType(&#34;text/x-shellscript&#34;)
     *                 .filename(&#34;foobar.sh&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetConfigResult> getConfigPlain(GetConfigPlainArgs args) {
        return getConfigPlain(args, InvokeOptions.Empty);
    }
    /**
     * Renders a [multipart MIME configuration](https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive)
     * for use with [cloud-init](https://cloudinit.readthedocs.io/).
     * 
     * Cloud-init is a commonly-used startup configuration utility for cloud compute
     * instances. It accepts configuration via provider-specific user data mechanisms,
     * such as `user_data` for Amazon EC2 instances. Multipart MIME is one of the
     * data formats it accepts. For more information, see
     * [User-Data Formats](https://cloudinit.readthedocs.io/en/latest/topics/format.html)
     * in the cloud-init manual.
     * 
     * This is not a generalized utility for producing multipart MIME messages. Its
     * featureset is specialized for the features of cloud-init.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.cloudinit.CloudinitFunctions;
     * import com.pulumi.cloudinit.inputs.GetConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = CloudinitFunctions.getConfig(GetConfigArgs.builder()
     *             .base64Encode(false)
     *             .gzip(false)
     *             .parts(GetConfigPartArgs.builder()
     *                 .content(&#34;baz&#34;)
     *                 .contentType(&#34;text/x-shellscript&#34;)
     *                 .filename(&#34;foobar.sh&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetConfigResult> getConfig(GetConfigArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("cloudinit:index/getConfig:getConfig", TypeShape.of(GetConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Renders a [multipart MIME configuration](https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive)
     * for use with [cloud-init](https://cloudinit.readthedocs.io/).
     * 
     * Cloud-init is a commonly-used startup configuration utility for cloud compute
     * instances. It accepts configuration via provider-specific user data mechanisms,
     * such as `user_data` for Amazon EC2 instances. Multipart MIME is one of the
     * data formats it accepts. For more information, see
     * [User-Data Formats](https://cloudinit.readthedocs.io/en/latest/topics/format.html)
     * in the cloud-init manual.
     * 
     * This is not a generalized utility for producing multipart MIME messages. Its
     * featureset is specialized for the features of cloud-init.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.cloudinit.CloudinitFunctions;
     * import com.pulumi.cloudinit.inputs.GetConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var foo = CloudinitFunctions.getConfig(GetConfigArgs.builder()
     *             .base64Encode(false)
     *             .gzip(false)
     *             .parts(GetConfigPartArgs.builder()
     *                 .content(&#34;baz&#34;)
     *                 .contentType(&#34;text/x-shellscript&#34;)
     *                 .filename(&#34;foobar.sh&#34;)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetConfigResult> getConfigPlain(GetConfigPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("cloudinit:index/getConfig:getConfig", TypeShape.of(GetConfigResult.class), args, Utilities.withVersion(options));
    }
}
