{
    "name": "cloudinit",
    "description": "A Pulumi package for creating and managing cloudinit cloud resources.",
    "keywords": [
        "pulumi",
        "cloudinit"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`cloudinit` Terraform Provider](https://github.com/hashicorp/terraform-provider-cloudinit).",
    "repository": "https://github.com/pulumi/pulumi-cloudinit",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "cloudinit": "CloudInit"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-cloudinit/sdk/go/cloudinit",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing cloudinit cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hashicorp/terraform-provider-cloudinit)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-cloudinit` repo](https://github.com/pulumi/pulumi-cloudinit/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-cloudinit` repo](https://github.com/hashicorp/terraform-provider-cloudinit/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/hashicorp/terraform-provider-cloudinit)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-cloudinit` repo](https://github.com/pulumi/pulumi-cloudinit/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-cloudinit` repo](https://github.com/hashicorp/terraform-provider-cloudinit/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {},
    "types": {
        "cloudinit:index/ConfigPart:ConfigPart": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Body content for the part.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "A MIME-style content type to report in the header for the part. Defaults to `text/plain`\n"
                },
                "filename": {
                    "type": "string",
                    "description": "A filename to report in the header for the part.\n"
                },
                "mergeType": {
                    "type": "string",
                    "description": "A value for the `X-Merge-Type` header of the part, to control [cloud-init merging behavior](https://cloudinit.readthedocs.io/en/latest/reference/merging.html).\n"
                }
            },
            "type": "object",
            "required": [
                "content"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "content",
                        "contentType"
                    ]
                }
            }
        },
        "cloudinit:index/getConfigPart:getConfigPart": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Body content for the part.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "A MIME-style content type to report in the header for the part. Defaults to `text/plain`\n"
                },
                "filename": {
                    "type": "string",
                    "description": "A filename to report in the header for the part.\n"
                },
                "mergeType": {
                    "type": "string",
                    "description": "A value for the `X-Merge-Type` header of the part, to control [cloud-init merging behavior](https://cloudinit.readthedocs.io/en/latest/reference/merging.html).\n"
                }
            },
            "type": "object",
            "required": [
                "content",
                "contentType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": [
                        "content"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the cloudinit package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n"
    },
    "resources": {
        "cloudinit:index/config:Config": {
            "description": "\u003e **This resource is deprecated** Please use the cloudinit.Config\n  data source instead.\n\nRenders a [multi-part MIME configuration](https://cloudinit.readthedocs.io/en/latest/explanation/format.html#mime-multi-part-archive) for use with [cloud-init](https://cloudinit.readthedocs.io/en/latest/).\n\nCloud-init is a commonly-used startup configuration utility for cloud compute instances. It accepts configuration via provider-specific user data mechanisms, such as `user_data` for Amazon EC2 instances. Multi-part MIME is one of the data formats it accepts. For more information, see [User-Data Formats](https://cloudinit.readthedocs.io/en/latest/explanation/format.html) in the cloud-init manual.\n\nThis is not a generalized utility for producing multi-part MIME messages. It's feature set is specialized for cloud-init multi-part MIME messages.\n\n{{% examples %}}\n## Example Usage\n\n### Config\n```terraform\nresource \"cloudinit_config\" \"foobar\" {\n  gzip          = false\n  base64_encode = false\n\n  part {\n    filename     = \"hello-script.sh\"\n    content_type = \"text/x-shellscript\"\n\n    content = file(\"${path.module}/hello-script.sh\")\n  }\n\n  part {\n    filename     = \"cloud-config.yaml\"\n    content_type = \"text/cloud-config\"\n\n    content = file(\"${path.module}/cloud-config.yaml\")\n  }\n}\n```\n\n### hello-script.sh\n```shell\n#!/bin/sh\necho \"Hello World! I'm starting up now at $(date -R)!\"\n```\n\n### cloud-config.yaml\n```yaml\n#cloud-config\n# See documentation for more configuration examples\n# https://cloudinit.readthedocs.io/en/latest/reference/examples.html \n\n# Install arbitrary packages\n# https://cloudinit.readthedocs.io/en/latest/reference/examples.html#install-arbitrary-packages\npackages:\n  - python\n# Run commands on first boot\n# https://cloudinit.readthedocs.io/en/latest/reference/examples.html#run-commands-on-first-boot\nruncmd:\n - [ ls, -l, / ]\n - [ sh, -xc, \"echo $(date) ': hello world!'\" ]\n - [ sh, -c, echo \"=========hello world=========\" ]\n - ls -l /root\n```\n\n\u003c!-- This schema was originally generated with tfplugindocs, then modified manually to ensure `part` block list is noted as Required --\u003e\n\n{{% /examples %}}",
            "properties": {
                "base64Encode": {
                    "type": "boolean",
                    "description": "Specify whether or not to base64 encode the `rendered` output. Defaults to `true`, and cannot be disabled if gzip is `true`.\n"
                },
                "boundary": {
                    "type": "string",
                    "description": "Specify the Writer's default boundary separator. Defaults to `MIMEBOUNDARY`.\n"
                },
                "gzip": {
                    "type": "boolean",
                    "description": "Specify whether or not to gzip the `rendered` output. Defaults to `true`.\n"
                },
                "parts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cloudinit:index/ConfigPart:ConfigPart"
                    },
                    "description": "A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.\n"
                },
                "rendered": {
                    "type": "string",
                    "description": "The final rendered multi-part cloud-init config.\n"
                }
            },
            "required": [
                "base64Encode",
                "boundary",
                "gzip",
                "rendered"
            ],
            "inputProperties": {
                "base64Encode": {
                    "type": "boolean",
                    "description": "Specify whether or not to base64 encode the `rendered` output. Defaults to `true`, and cannot be disabled if gzip is `true`.\n"
                },
                "boundary": {
                    "type": "string",
                    "description": "Specify the Writer's default boundary separator. Defaults to `MIMEBOUNDARY`.\n"
                },
                "gzip": {
                    "type": "boolean",
                    "description": "Specify whether or not to gzip the `rendered` output. Defaults to `true`.\n"
                },
                "parts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cloudinit:index/ConfigPart:ConfigPart"
                    },
                    "description": "A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Config resources.\n",
                "properties": {
                    "base64Encode": {
                        "type": "boolean",
                        "description": "Specify whether or not to base64 encode the `rendered` output. Defaults to `true`, and cannot be disabled if gzip is `true`.\n"
                    },
                    "boundary": {
                        "type": "string",
                        "description": "Specify the Writer's default boundary separator. Defaults to `MIMEBOUNDARY`.\n"
                    },
                    "gzip": {
                        "type": "boolean",
                        "description": "Specify whether or not to gzip the `rendered` output. Defaults to `true`.\n"
                    },
                    "parts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudinit:index/ConfigPart:ConfigPart"
                        },
                        "description": "A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.\n"
                    },
                    "rendered": {
                        "type": "string",
                        "description": "The final rendered multi-part cloud-init config.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "cloudinit:index/getConfig:getConfig": {
            "description": "Renders a [multi-part MIME configuration](https://cloudinit.readthedocs.io/en/latest/explanation/format.html#mime-multi-part-archive) for use with [cloud-init](https://cloudinit.readthedocs.io/en/latest/).\n\nCloud-init is a commonly-used startup configuration utility for cloud compute instances. It accepts configuration via provider-specific user data mechanisms, such as `user_data` for Amazon EC2 instances. Multi-part MIME is one of the data formats it accepts. For more information, see [User-Data Formats](https://cloudinit.readthedocs.io/en/latest/explanation/format.html) in the cloud-init manual.\n\nThis is not a generalized utility for producing multi-part MIME messages. It's feature set is specialized for cloud-init multi-part MIME messages.\n\n{{% examples %}}\n## Example Usage\n\n### Config\n```terraform\ndata \"cloudinit_config\" \"foobar\" {\n  gzip          = false\n  base64_encode = false\n\n  part {\n    filename     = \"hello-script.sh\"\n    content_type = \"text/x-shellscript\"\n\n    content = file(\"${path.module}/hello-script.sh\")\n  }\n\n  part {\n    filename     = \"cloud-config.yaml\"\n    content_type = \"text/cloud-config\"\n\n    content = file(\"${path.module}/cloud-config.yaml\")\n  }\n}\n```\n\n### hello-script.sh\n```shell\n#!/bin/sh\necho \"Hello World! I'm starting up now at $(date -R)!\"\n```\n\n### cloud-config.yaml\n```yaml\n#cloud-config\n# See documentation for more configuration examples\n# https://cloudinit.readthedocs.io/en/latest/reference/examples.html \n\n# Install arbitrary packages\n# https://cloudinit.readthedocs.io/en/latest/reference/examples.html#install-arbitrary-packages\npackages:\n  - python\n# Run commands on first boot\n# https://cloudinit.readthedocs.io/en/latest/reference/examples.html#run-commands-on-first-boot\nruncmd:\n - [ ls, -l, / ]\n - [ sh, -xc, \"echo $(date) ': hello world!'\" ]\n - [ sh, -c, echo \"=========hello world=========\" ]\n - ls -l /root\n```\n\n\u003c!-- This schema was originally generated with tfplugindocs, then modified manually to ensure `part` block list is noted as Required --\u003e\n\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getConfig.\n",
                "properties": {
                    "base64Encode": {
                        "type": "boolean",
                        "description": "Specify whether or not to base64 encode the `rendered` output. Defaults to `true`, and cannot be disabled if gzip is `true`.\n"
                    },
                    "boundary": {
                        "type": "string",
                        "description": "Specify the Writer's default boundary separator. Defaults to `MIMEBOUNDARY`.\n"
                    },
                    "gzip": {
                        "type": "boolean",
                        "description": "Specify whether or not to gzip the `rendered` output. Defaults to `true`.\n"
                    },
                    "parts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudinit:index/getConfigPart:getConfigPart"
                        },
                        "description": "A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getConfig.\n",
                "properties": {
                    "base64Encode": {
                        "type": "boolean",
                        "description": "Specify whether or not to base64 encode the `rendered` output. Defaults to `true`, and cannot be disabled if gzip is `true`.\n"
                    },
                    "boundary": {
                        "type": "string",
                        "description": "Specify the Writer's default boundary separator. Defaults to `MIMEBOUNDARY`.\n"
                    },
                    "gzip": {
                        "type": "boolean",
                        "description": "Specify whether or not to gzip the `rendered` output. Defaults to `true`.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "[CRC-32](https://pkg.go.dev/hash/crc32) checksum of `rendered` cloud-init config.\n"
                    },
                    "parts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cloudinit:index/getConfigPart:getConfigPart"
                        },
                        "description": "A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.\n"
                    },
                    "rendered": {
                        "type": "string",
                        "description": "The final rendered multi-part cloud-init config.\n"
                    }
                },
                "type": "object",
                "required": [
                    "base64Encode",
                    "boundary",
                    "gzip",
                    "id",
                    "rendered"
                ]
            }
        }
    }
}