// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Config extends pulumi.CustomResource {
    /**
     * Get an existing Config resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigState, opts?: pulumi.CustomResourceOptions): Config {
        return new Config(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cloudinit:index/config:Config';

    /**
     * Returns true if the given object is an instance of Config.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Config {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Config.__pulumiType;
    }

    public readonly base64Encode!: pulumi.Output<boolean | undefined>;
    public readonly boundary!: pulumi.Output<string | undefined>;
    public readonly gzip!: pulumi.Output<boolean | undefined>;
    public readonly parts!: pulumi.Output<outputs.ConfigPart[]>;
    /**
     * rendered cloudinit configuration
     */
    public /*out*/ readonly rendered!: pulumi.Output<string>;

    /**
     * Create a Config resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigArgs | ConfigState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigState | undefined;
            inputs["base64Encode"] = state ? state.base64Encode : undefined;
            inputs["boundary"] = state ? state.boundary : undefined;
            inputs["gzip"] = state ? state.gzip : undefined;
            inputs["parts"] = state ? state.parts : undefined;
            inputs["rendered"] = state ? state.rendered : undefined;
        } else {
            const args = argsOrState as ConfigArgs | undefined;
            if ((!args || args.parts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parts'");
            }
            inputs["base64Encode"] = args ? args.base64Encode : undefined;
            inputs["boundary"] = args ? args.boundary : undefined;
            inputs["gzip"] = args ? args.gzip : undefined;
            inputs["parts"] = args ? args.parts : undefined;
            inputs["rendered"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Config.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Config resources.
 */
export interface ConfigState {
    readonly base64Encode?: pulumi.Input<boolean>;
    readonly boundary?: pulumi.Input<string>;
    readonly gzip?: pulumi.Input<boolean>;
    readonly parts?: pulumi.Input<pulumi.Input<inputs.ConfigPart>[]>;
    /**
     * rendered cloudinit configuration
     */
    readonly rendered?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Config resource.
 */
export interface ConfigArgs {
    readonly base64Encode?: pulumi.Input<boolean>;
    readonly boundary?: pulumi.Input<string>;
    readonly gzip?: pulumi.Input<boolean>;
    readonly parts: pulumi.Input<pulumi.Input<inputs.ConfigPart>[]>;
}
