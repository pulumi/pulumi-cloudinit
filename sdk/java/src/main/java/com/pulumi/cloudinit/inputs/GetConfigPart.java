// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudinit.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetConfigPart extends com.pulumi.resources.InvokeArgs {

    public static final GetConfigPart Empty = new GetConfigPart();

    /**
     * Body content for the part.
     * 
     */
    @Import(name="content", required=true)
    private String content;

    /**
     * @return Body content for the part.
     * 
     */
    public String content() {
        return this.content;
    }

    /**
     * A MIME-style content type to report in the header for the part. Defaults to `text/plain`
     * 
     */
    @Import(name="contentType")
    private @Nullable String contentType;

    /**
     * @return A MIME-style content type to report in the header for the part. Defaults to `text/plain`
     * 
     */
    public Optional<String> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * A filename to report in the header for the part.
     * 
     */
    @Import(name="filename")
    private @Nullable String filename;

    /**
     * @return A filename to report in the header for the part.
     * 
     */
    public Optional<String> filename() {
        return Optional.ofNullable(this.filename);
    }

    /**
     * A value for the `X-Merge-Type` header of the part, to control [cloud-init merging behavior](https://cloudinit.readthedocs.io/en/latest/reference/merging.html).
     * 
     */
    @Import(name="mergeType")
    private @Nullable String mergeType;

    /**
     * @return A value for the `X-Merge-Type` header of the part, to control [cloud-init merging behavior](https://cloudinit.readthedocs.io/en/latest/reference/merging.html).
     * 
     */
    public Optional<String> mergeType() {
        return Optional.ofNullable(this.mergeType);
    }

    private GetConfigPart() {}

    private GetConfigPart(GetConfigPart $) {
        this.content = $.content;
        this.contentType = $.contentType;
        this.filename = $.filename;
        this.mergeType = $.mergeType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetConfigPart defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetConfigPart $;

        public Builder() {
            $ = new GetConfigPart();
        }

        public Builder(GetConfigPart defaults) {
            $ = new GetConfigPart(Objects.requireNonNull(defaults));
        }

        /**
         * @param content Body content for the part.
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            $.content = content;
            return this;
        }

        /**
         * @param contentType A MIME-style content type to report in the header for the part. Defaults to `text/plain`
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable String contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param filename A filename to report in the header for the part.
         * 
         * @return builder
         * 
         */
        public Builder filename(@Nullable String filename) {
            $.filename = filename;
            return this;
        }

        /**
         * @param mergeType A value for the `X-Merge-Type` header of the part, to control [cloud-init merging behavior](https://cloudinit.readthedocs.io/en/latest/reference/merging.html).
         * 
         * @return builder
         * 
         */
        public Builder mergeType(@Nullable String mergeType) {
            $.mergeType = mergeType;
            return this;
        }

        public GetConfigPart build() {
            if ($.content == null) {
                throw new MissingRequiredPropertyException("GetConfigPart", "content");
            }
            $.contentType = Codegen.stringProp("contentType").arg($.contentType).def("text/plain").getNullable();
            return $;
        }
    }

}
