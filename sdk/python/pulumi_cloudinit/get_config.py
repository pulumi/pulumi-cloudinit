# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = [
    'GetConfigResult',
    'AwaitableGetConfigResult',
    'get_config',
]

@pulumi.output_type
class GetConfigResult:
    """
    A collection of values returned by getConfig.
    """
    def __init__(__self__, base64_encode=None, boundary=None, gzip=None, id=None, parts=None, rendered=None):
        if base64_encode and not isinstance(base64_encode, bool):
            raise TypeError("Expected argument 'base64_encode' to be a bool")
        pulumi.set(__self__, "base64_encode", base64_encode)
        if boundary and not isinstance(boundary, str):
            raise TypeError("Expected argument 'boundary' to be a str")
        pulumi.set(__self__, "boundary", boundary)
        if gzip and not isinstance(gzip, bool):
            raise TypeError("Expected argument 'gzip' to be a bool")
        pulumi.set(__self__, "gzip", gzip)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if parts and not isinstance(parts, list):
            raise TypeError("Expected argument 'parts' to be a list")
        pulumi.set(__self__, "parts", parts)
        if rendered and not isinstance(rendered, str):
            raise TypeError("Expected argument 'rendered' to be a str")
        pulumi.set(__self__, "rendered", rendered)

    @property
    @pulumi.getter(name="base64Encode")
    def base64_encode(self) -> Optional[bool]:
        return pulumi.get(self, "base64_encode")

    @property
    @pulumi.getter
    def boundary(self) -> Optional[str]:
        return pulumi.get(self, "boundary")

    @property
    @pulumi.getter
    def gzip(self) -> Optional[bool]:
        return pulumi.get(self, "gzip")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def parts(self) -> Sequence['outputs.GetConfigPartResult']:
        return pulumi.get(self, "parts")

    @property
    @pulumi.getter
    def rendered(self) -> str:
        """
        The final rendered multi-part cloud-init config.
        """
        return pulumi.get(self, "rendered")


class AwaitableGetConfigResult(GetConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigResult(
            base64_encode=self.base64_encode,
            boundary=self.boundary,
            gzip=self.gzip,
            id=self.id,
            parts=self.parts,
            rendered=self.rendered)


def get_config(base64_encode: Optional[bool] = None,
               boundary: Optional[str] = None,
               gzip: Optional[bool] = None,
               parts: Optional[Sequence[pulumi.InputType['GetConfigPartArgs']]] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigResult:
    """
    Renders a [multipart MIME configuration](https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive)
    for use with [cloud-init](https://cloudinit.readthedocs.io/).

    Cloud-init is a commonly-used startup configuration utility for cloud compute
    instances. It accepts configuration via provider-specific user data mechanisms,
    such as `user_data` for Amazon EC2 instances. Multipart MIME is one of the
    data formats it accepts. For more information, see
    [User-Data Formats](https://cloudinit.readthedocs.io/en/latest/topics/format.html)
    in the cloud-init manual.

    This is not a generalized utility for producing multipart MIME messages. Its
    featureset is specialized for the features of cloud-init.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudinit as cloudinit

    foo = cloudinit.get_config(base64_encode=False,
        gzip=False,
        parts=[cloudinit.GetConfigPartArgs(
            content="baz",
            content_type="text/x-shellscript",
            filename="foobar.sh",
        )])
    ```


    :param bool base64_encode: Base64 encoding of the rendered output. Defaults to `true`,
           and cannot be disabled if `gzip` is `true`.
    :param str boundary: Define the Writer's default boundary separator. Defaults to `MIMEBOUNDARY`.
    :param bool gzip: Specify whether or not to gzip the rendered output. Defaults to `true`.
    :param Sequence[pulumi.InputType['GetConfigPartArgs']] parts: A nested block type which adds a file to the generated
           cloud-init configuration. Use multiple `part` blocks to specify multiple
           files, which will be included in order of declaration in the final MIME
           document.
    """
    __args__ = dict()
    __args__['base64Encode'] = base64_encode
    __args__['boundary'] = boundary
    __args__['gzip'] = gzip
    __args__['parts'] = parts
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('cloudinit:index/getConfig:getConfig', __args__, opts=opts, typ=GetConfigResult).value

    return AwaitableGetConfigResult(
        base64_encode=__ret__.base64_encode,
        boundary=__ret__.boundary,
        gzip=__ret__.gzip,
        id=__ret__.id,
        parts=__ret__.parts,
        rendered=__ret__.rendered)
