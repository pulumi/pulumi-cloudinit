// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudinit

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-cloudinit/sdk/go/cloudinit/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Renders a [multi-part MIME configuration](https://cloudinit.readthedocs.io/en/latest/explanation/format.html#mime-multi-part-archive) for use with [cloud-init](https://cloudinit.readthedocs.io/en/latest/).
//
// Cloud-init is a commonly-used startup configuration utility for cloud compute instances. It accepts configuration via provider-specific user data mechanisms, such as `userData` for Amazon EC2 instances. Multi-part MIME is one of the data formats it accepts. For more information, see [User-Data Formats](https://cloudinit.readthedocs.io/en/latest/explanation/format.html) in the cloud-init manual.
//
// This is not a generalized utility for producing multi-part MIME messages. It's feature set is specialized for cloud-init multi-part MIME messages.
//
// ## Example Usage
//
// ### Config
//
// ### hello-script.sh
//
// ### cloud-config.yaml
//
// <!-- This schema was originally generated with tfplugindocs, then modified manually to ensure `part` block list is noted as Required -->
func LookupConfig(ctx *pulumi.Context, args *LookupConfigArgs, opts ...pulumi.InvokeOption) (*LookupConfigResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupConfigResult
	err := ctx.Invoke("cloudinit:index/getConfig:getConfig", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConfig.
type LookupConfigArgs struct {
	// Specify whether or not to base64 encode the `rendered` output. Defaults to `true`, and cannot be disabled if gzip is `true`.
	Base64Encode *bool `pulumi:"base64Encode"`
	// Specify the Writer's default boundary separator. Defaults to `MIMEBOUNDARY`.
	Boundary *string `pulumi:"boundary"`
	// Specify whether or not to gzip the `rendered` output. Defaults to `true`.
	Gzip *bool `pulumi:"gzip"`
	// A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.
	Parts []GetConfigPart `pulumi:"parts"`
}

// A collection of values returned by getConfig.
type LookupConfigResult struct {
	// Specify whether or not to base64 encode the `rendered` output. Defaults to `true`, and cannot be disabled if gzip is `true`.
	Base64Encode bool `pulumi:"base64Encode"`
	// Specify the Writer's default boundary separator. Defaults to `MIMEBOUNDARY`.
	Boundary string `pulumi:"boundary"`
	// Specify whether or not to gzip the `rendered` output. Defaults to `true`.
	Gzip bool `pulumi:"gzip"`
	// [CRC-32](https://pkg.go.dev/hash/crc32) checksum of `rendered` cloud-init config.
	Id string `pulumi:"id"`
	// A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.
	Parts []GetConfigPart `pulumi:"parts"`
	// The final rendered multi-part cloud-init config.
	Rendered string `pulumi:"rendered"`
}

func LookupConfigOutput(ctx *pulumi.Context, args LookupConfigOutputArgs, opts ...pulumi.InvokeOption) LookupConfigResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupConfigResultOutput, error) {
			args := v.(LookupConfigArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudinit:index/getConfig:getConfig", args, LookupConfigResultOutput{}, options).(LookupConfigResultOutput), nil
		}).(LookupConfigResultOutput)
}

// A collection of arguments for invoking getConfig.
type LookupConfigOutputArgs struct {
	// Specify whether or not to base64 encode the `rendered` output. Defaults to `true`, and cannot be disabled if gzip is `true`.
	Base64Encode pulumi.BoolPtrInput `pulumi:"base64Encode"`
	// Specify the Writer's default boundary separator. Defaults to `MIMEBOUNDARY`.
	Boundary pulumi.StringPtrInput `pulumi:"boundary"`
	// Specify whether or not to gzip the `rendered` output. Defaults to `true`.
	Gzip pulumi.BoolPtrInput `pulumi:"gzip"`
	// A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.
	Parts GetConfigPartArrayInput `pulumi:"parts"`
}

func (LookupConfigOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfigArgs)(nil)).Elem()
}

// A collection of values returned by getConfig.
type LookupConfigResultOutput struct{ *pulumi.OutputState }

func (LookupConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupConfigResult)(nil)).Elem()
}

func (o LookupConfigResultOutput) ToLookupConfigResultOutput() LookupConfigResultOutput {
	return o
}

func (o LookupConfigResultOutput) ToLookupConfigResultOutputWithContext(ctx context.Context) LookupConfigResultOutput {
	return o
}

// Specify whether or not to base64 encode the `rendered` output. Defaults to `true`, and cannot be disabled if gzip is `true`.
func (o LookupConfigResultOutput) Base64Encode() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupConfigResult) bool { return v.Base64Encode }).(pulumi.BoolOutput)
}

// Specify the Writer's default boundary separator. Defaults to `MIMEBOUNDARY`.
func (o LookupConfigResultOutput) Boundary() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.Boundary }).(pulumi.StringOutput)
}

// Specify whether or not to gzip the `rendered` output. Defaults to `true`.
func (o LookupConfigResultOutput) Gzip() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupConfigResult) bool { return v.Gzip }).(pulumi.BoolOutput)
}

// [CRC-32](https://pkg.go.dev/hash/crc32) checksum of `rendered` cloud-init config.
func (o LookupConfigResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.Id }).(pulumi.StringOutput)
}

// A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.
func (o LookupConfigResultOutput) Parts() GetConfigPartArrayOutput {
	return o.ApplyT(func(v LookupConfigResult) []GetConfigPart { return v.Parts }).(GetConfigPartArrayOutput)
}

// The final rendered multi-part cloud-init config.
func (o LookupConfigResultOutput) Rendered() pulumi.StringOutput {
	return o.ApplyT(func(v LookupConfigResult) string { return v.Rendered }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupConfigResultOutput{})
}
