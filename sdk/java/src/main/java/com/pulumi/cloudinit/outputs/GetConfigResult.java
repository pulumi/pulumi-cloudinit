// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudinit.outputs;

import com.pulumi.cloudinit.outputs.GetConfigPart;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;

@CustomType
public final class GetConfigResult {
    /**
     * @return Specify whether or not to base64 encode the `rendered` output. Defaults to `true`, and cannot be disabled if gzip is `true`.
     * 
     */
    private Boolean base64Encode;
    /**
     * @return Specify the Writer&#39;s default boundary separator. Defaults to `MIMEBOUNDARY`.
     * 
     */
    private String boundary;
    /**
     * @return Specify whether or not to gzip the `rendered` output. Defaults to `true`.
     * 
     */
    private Boolean gzip;
    /**
     * @return [CRC-32](https://pkg.go.dev/hash/crc32) checksum of `rendered` cloud-init config.
     * 
     */
    private String id;
    /**
     * @return A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.
     * 
     */
    private @Nullable List<GetConfigPart> parts;
    /**
     * @return The final rendered multi-part cloud-init config.
     * 
     */
    private String rendered;

    private GetConfigResult() {}
    /**
     * @return Specify whether or not to base64 encode the `rendered` output. Defaults to `true`, and cannot be disabled if gzip is `true`.
     * 
     */
    public Boolean base64Encode() {
        return this.base64Encode;
    }
    /**
     * @return Specify the Writer&#39;s default boundary separator. Defaults to `MIMEBOUNDARY`.
     * 
     */
    public String boundary() {
        return this.boundary;
    }
    /**
     * @return Specify whether or not to gzip the `rendered` output. Defaults to `true`.
     * 
     */
    public Boolean gzip() {
        return this.gzip;
    }
    /**
     * @return [CRC-32](https://pkg.go.dev/hash/crc32) checksum of `rendered` cloud-init config.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return A nested block type which adds a file to the generated cloud-init configuration. Use multiple `part` blocks to specify multiple files, which will be included in order of declaration in the final MIME document.
     * 
     */
    public List<GetConfigPart> parts() {
        return this.parts == null ? List.of() : this.parts;
    }
    /**
     * @return The final rendered multi-part cloud-init config.
     * 
     */
    public String rendered() {
        return this.rendered;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean base64Encode;
        private String boundary;
        private Boolean gzip;
        private String id;
        private @Nullable List<GetConfigPart> parts;
        private String rendered;
        public Builder() {}
        public Builder(GetConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.base64Encode = defaults.base64Encode;
    	      this.boundary = defaults.boundary;
    	      this.gzip = defaults.gzip;
    	      this.id = defaults.id;
    	      this.parts = defaults.parts;
    	      this.rendered = defaults.rendered;
        }

        @CustomType.Setter
        public Builder base64Encode(Boolean base64Encode) {
            if (base64Encode == null) {
              throw new MissingRequiredPropertyException("GetConfigResult", "base64Encode");
            }
            this.base64Encode = base64Encode;
            return this;
        }
        @CustomType.Setter
        public Builder boundary(String boundary) {
            if (boundary == null) {
              throw new MissingRequiredPropertyException("GetConfigResult", "boundary");
            }
            this.boundary = boundary;
            return this;
        }
        @CustomType.Setter
        public Builder gzip(Boolean gzip) {
            if (gzip == null) {
              throw new MissingRequiredPropertyException("GetConfigResult", "gzip");
            }
            this.gzip = gzip;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetConfigResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder parts(@Nullable List<GetConfigPart> parts) {

            this.parts = parts;
            return this;
        }
        public Builder parts(GetConfigPart... parts) {
            return parts(List.of(parts));
        }
        @CustomType.Setter
        public Builder rendered(String rendered) {
            if (rendered == null) {
              throw new MissingRequiredPropertyException("GetConfigResult", "rendered");
            }
            this.rendered = rendered;
            return this;
        }
        public GetConfigResult build() {
            final var _resultValue = new GetConfigResult();
            _resultValue.base64Encode = base64Encode;
            _resultValue.boundary = boundary;
            _resultValue.gzip = gzip;
            _resultValue.id = id;
            _resultValue.parts = parts;
            _resultValue.rendered = rendered;
            return _resultValue;
        }
    }
}
